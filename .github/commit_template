# Type         | Description                                                                                                
# -------------|------------------------------------------------------------------------------------------------------------
# BUILD    | Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)        
# CI       | Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)
# DOCS     | Documentation only changes                                                                                 
# FEAT     | A new feature                                                                                              
# FIX      | A bug fix                                                                                                  
# PERF     | A code change that improves performance                                                                    
# REFACTOR | A code change that neither fixes a bug nor adds a feature                                                  
# STYLE    | Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)     
# TEST     | Adding missing tests or correcting existing tests                                                          

## SUBJECT

# The subject contains succinct description of the change:

# - use the imperative, present tense: "change" not "changed" nor "changes"
# - don't capitalize first letter
# - no dot (.) at the end

## BODY
# Just as in the **subject**, use the imperative, present tense: "change" not "changed" nor "changes".
# The body should include the motivation for the change and contrast this with previous behavior.

## FOOTER
# The footer should contain any information about **Breaking Changes** and is also the place to reference GitHub issues that this commit **Closes**.

# **Breaking Changes** should start with the word `BREAKING CHANGE:` with a space or two newlines. The rest of the commit message is then used for this.

## EXAMPLES

# fix(pencil): stop graphite breaking when too much pressure applied

# feat(pencil): add 'graphiteWidth' option
#
# Fix #42

# perf(pencil): remove graphiteWidth option
# 
# BREAKING CHANGE: The graphiteWidth option has been removed.
# 
# The default graphite width of 10mm is always used for performance reasons.

# more at https://github.com/semantic-release/semantic-release/blob/d4f68a5680ebcd8c9adf1d1fee26507a079aac62/CONTRIBUTING.md#type



#OLD
# <type>: (If applied, this commit will...) <subject> (Max 50 char)
# |<----  Using a Maximum Of 50 Characters  ---->|


# Explain why this change is being made
# |<----   Try To Limit Each Line to a Maximum Of 72 Characters   ---->|

# Provide links or keys to any relevant tickets, articles or other resources
# Example: Github issue #23

# --- COMMIT END ---
# Type can be 
#    feat     (new feature)
#    fix      (bug fix)
#    refactor (refactoring production code)
#    style    (formatting, missing semi colons, etc; no code change)
#    docs     (changes to documentation)
#    test     (adding or refactoring tests; no production code change)
#    chore    (updating grunt tasks etc; no production code change)
# --------------------
# Remember to
#    Capitalize the subject line
#    Use the imperative mood in the subject line
#    Do not end the subject line with a period
#    Separate subject from body with a blank line
#    Use the body to explain what and why vs. how
#    Can use multiple lines with "-" for bullet points in body
# --------------------
# For more information about this template, check out
# https://gist.github.com/adeekshith/cd4c95a064977cdc6c50
